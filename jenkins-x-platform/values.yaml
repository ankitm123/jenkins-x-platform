#Â to specify the docker registry when not using Jenkins
dockerRegistry: ""

JXBasicAuth: admin:$apr1$a/HdTrV7$XYCGJWF9PdVwVVTvjMyaU/

extensions:
  enabled: true
teamRoles:
  viewer:
    enabled: true
    rules:
      - apiGroups:
        - ""
        - jenkins.io
        - extensions
        - apps
        - rbac.authorization.k8s.io
        - batch
        - tekton.dev
        resources:
        - "*"
        - pipelineruns
        - deployments
        verbs:
        - list
        - get
        - watch
  committer:
    enabled: true
    rules:
      - apiGroups:
        - jenkins.io
        - rbac.authorization.k8s.io
        - tekton.dev
        resources:
        - "*"
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - ""
        - extensions
        - apps
        - batch
        resources:
        - "*"
        - "pods/*"
        - deployments
        verbs:
        - list
        - get
        - watch
        - create
        - update
        - patch
        - delete
  owner:
    enabled: true
    rules:
      - apiGroups:
        - ""
        - extensions
        - apps
        - rbac.authorization.k8s.io
        - batch
        - jenkins.io
        - tekton.dev
        resources:
        - "*"
        - "pods/*"
        - deployments
        verbs:
        - list
        - get
        - watch
        - create
        - update
        - patch
        - delete
  team-admin:
    enabled: true


BuildPacks:
  "classic-workloads":
     Label: "Library Workloads: CI+Release but no CD"
     GitUrl: "https://github.com/jenkins-x-buildpacks/jenkins-x-classic.git"
     GitRef: "master"
  "kubernetes-workloads":
     Label: "Kubernetes Workloads: Automated CI+CD with GitOps Promotion"
     GitUrl: "https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes.git"
     GitRef: "master"

gcpreviews:
  serviceaccount:
    enabled: true
  cronjob:
    enabled: true
    schedule: "0 */3 * * *"
  args:
    - "gc"
    - "previews"
    - "--batch-mode"
  image:
    repository: gcr.io/jenkinsxio/builder-jx
    tag: 2.1.88-717
  role:
    enabled: true
    rules:
      - apiGroups:
        - jenkins.io
        resources:
        - environments
        - releases
        - facts
        - pipelineactivities
        - commitstatuses
        - schedulers
        - extensions
        - users
        - teams
        - pipelinestructures
        - plugins
        - buildpacks
        - apps
        - sourcerepositories
        - gitservices
        - workflows
        - environmentrolebindings
        - sourcerepositorygroups
        verbs:
        - list
        - get
        - patch
        - update
        - delete
      - apiGroups:
        - ""
        resources:
        - namespaces
        - secrets
        - services
        - replicationcontrollers
        - persistentvolumeclaims
        - configmaps
        - serviceaccounts
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - apps
        resources:
        - daemonsets
        - deployments
        - replicasets
        - statefulsets
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - autoscaling
        resources:
        - horizontalpodautoscalers
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - batch
        resources:
        - jobs
        - cronjobs
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - tekton.dev
        resources:
        - pipelines
        - taskruns
        - tasks
        - clustertasks
        - pipelineresources
        - pipelineruns
        - conditions
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - rbac.authorization.k8s.io
        resources:
        - roles
        - rolebindings
        verbs:
        - list
        - get
      - apiGroups:
        - vault.banzaicloud.com
        resources:
        - vaults
        verbs:
        - list
        - get
      - apiGroups:
        - extensions
        resources:
        - ingresses
        verbs:
        - list
        - get
  clusterrole:
    enabled: true
    rules:
    - apiGroups:
      - ""
      resources:
      - namespaces
      verbs:
      - get
      - list
      - delete
    - apiGroups:
      - ""
      resources:
      - pods
      - pods/portforward
      verbs:
      - get
      - create
      - list
      - delete
    - apiGroups:
      - rbac.authorization.k8s.io
      resources:
      - clusterroles
      - clusterrolebindings
      - customresourcedefinitions
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - rbac.authorization.k8s.io
      resources:
      - customresourcedefinitions
      verbs:
      - create
    - apiGroups:
      - tekton.dev
      resources:
      - clustertasks
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - apiextensions.k8s.io
      resources:
      - customresourcedefinitions
      verbs:
      - get
      - list
      - watch
      - create
      - update

gcactivities:
  serviceaccount:
    enabled: true
  cronjob:
    enabled: true
    schedule: "0/30 */3 * * *"
  args:
  - "gc"
  - "activities"
  - "--batch-mode"
  image:
    repository: gcr.io/jenkinsxio/builder-jx
    tag: 2.1.88-717
  role:
    enabled: true
    rules:
    - apiGroups:
      - jenkins.io
      resources:
      - pipelineactivities
      verbs:
      - list
      - delete
    - apiGroups:
      - jenkins.io
      resources:
      - environments
      verbs:
      - get
      - list
      - patch
      - update
      - watch
    - apiGroups:
      - jenkins.io
      resources:
      - plugins
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - namespaces
      - secrets
      - services
      verbs:
      - get
    - apiGroups:
      - apps
      resources:
      - deployments
      verbs:
      - get
    - apiGroups:
      - tekton.dev
      resources:
      - pipelineruns
      verbs:
      - get
      - list
      - watch
      - delete
    - apiGroups:
      - prow.k8s.io
      resources:
      - prowjobs
      verbs:
      - get
      - list
      - watch
      - delete
  clusterrole:
    enabled: true
    rules:
    - apiGroups:
      - apiextensions.k8s.io
      resources:
      - customresourcedefinitions
      verbs:
      - get
      - create
      - patch
      - update
    - apiGroups:
      - ""
      resources:
      - namespaces
      verbs:
      - get
      - delete
      - list
    - apiGroups:
      - apps
      resources:
      - deployments
      verbs:
      - get

gcpods:
  serviceaccount:
    enabled: true
  cronjob:
    enabled: true
    schedule: "0/30 */3 * * *"
  args:
  - "gc"
  - "pods"
  - "--batch-mode"
  image:
    repository: gcr.io/jenkinsxio/builder-jx
    tag: 2.1.88-717
  role:
    enabled: true
    rules:
    - apiGroups:
      - jenkins.io
      resources:
      - environments
      - plugins
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - namespaces
      - pods
      verbs:
      - get
      - delete
      - list

postinstalljob:
  enabled: false
  serviceaccount:
    enabled: true
  job:
    enabled: true
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-delete-policy: hook-succeeded
  args:
  - "step"
  - "post"
  - "install"
  - "--batch-mode"
  role:
    enabled: true
    rules:
    - apiGroups:
      - ""
      resources:
      - configmaps
      - secrets
      - services
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - jenkins.io
      resources:
      - environments
      verbs:
      - get
      - list
      - watch
  clusterrole:
    enabled: true
    rules:
    - apiGroups:
      - apiextensions.k8s.io
      resources:
      - customresourcedefinitions
      verbs:
      - get
      - create
      - patch
      - update
    - apiGroups:
      - ""
      resources:
      - namespaces
      verbs:
      - get
      - list
      - watch

controllerworkflow:
  enabled: false
  serviceaccount:
    enabled: true
  deployment:
    enabled: true
  probe:
    path: ""
  restartPolicy: Always
  args:
  - "controller"
  - "workflow"
  image:
    repository: gcr.io/jenkinsxio/builder-jx
    tag: 2.1.88-717
  clusterrole:
    enabled: true
    rules:
    - apiGroups:
      - ""
      resources:
      - namespaces
      verbs:
      - get
      - list
    - apiGroups:
      - apiextensions.k8s.io
      resources:
      - customresourcedefinitions
      verbs:
      - get
      - create
      - patch
      - update
      - list
  role:
    enabled: true
    rules:
    - apiGroups:
      - jenkins.io
      resources:
      - pipelineactivities
      verbs:
      - list
      - get
      - watch
      - create
      - patch
      - update
    - apiGroups:
      - jenkins.io
      resources:
      - workflows
      - environments
      verbs:
      - list
      - get
      - watch
    - apiGroups:
      - ""
      resources:
      - namespaces
      - services
      - secrets
      verbs:
      - list
      - get

controllerbuild:
  enabled: false
  serviceaccount:
    enabled: true
  deployment:
    enabled: true
  probe:
    path: ""
  restartPolicy: Always
  args:
  - "controller"
  - "build"
  - "--batch-mode"
  - "--git-credentials"
  - "--verbose"
  image:
    repository: gcr.io/jenkinsxio/builder-go
    tag: 2.1.88-717
  env:
    GIT_AUTHOR_NAME: "jenkins-x-bot"
    GIT_AUTHOR_EMAIL: "jenkins-x@googlegroups.com"
    XDG_CONFIG_HOME: "/home/jenkins"
  clusterrole:
    enabled: true
    rules:
    - apiGroups:
      - ""
      resources:
      - namespaces
      verbs:
      - get
      - list
    - apiGroups:
      - apiextensions.k8s.io
      resources:
      - customresourcedefinitions
      verbs:
      - get
      - create
      - patch
      - update
      - list
    - apiGroups:
      - tekton.dev
      resources:
      - pipelines
      - pipelinereources
      - pipelineruns
      - tasks
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - apps
      resources:
      - deployments
      verbs:
      - get
      - list
      - watch
  role:
    enabled: true
    rules:
    - apiGroups:
      - jenkins.io
      resources:
      - pipelineactivities
      - pipelinestructures
      - sourcerepositories
      verbs:
      - list
      - get
      - watch
      - create
      - update
      - patch
    - apiGroups:
      - jenkins.io
      resources:
      - environments
      - plugins
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - namespaces
      - pods
      - pods/log
      - secrets
      - configmaps
      - serviceaccounts
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - extensions
      resources:
      - ingresses
      verbs:
      - list
      - get
    - apiGroups:
      - vault.banzaicloud.com
      resources:
      - vaults
      verbs:
      - list
      - get
    - apiGroups:
      - tekton.dev
      resources:
      - pipelines
      - pipelinereources
      - pipelineruns
      - tasks
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - apps
      resources:
      - deployments
      verbs:
      - get
      - list
      - watch


controllercommitstatus:
  enabled: false
  serviceaccount:
    enabled: true
  deployment:
    enabled: true
  probe:
    path: ""
  restartPolicy: Always
  args:
  - "controller"
  - "commitstatus"
  - "--verbose"
  image:
    repository: gcr.io/jenkinsxio/builder-jx
    tag: 2.1.88-717
  clusterrole:
    enabled: true
    rules:
    - apiGroups:
      - ""
      resources:
      - namespaces
      verbs:
      - get
      - list
    - apiGroups:
      - apiextensions.k8s.io
      resources:
      - customresourcedefinitions
      verbs:
      - get
      - create
      - patch
      - update
      - list
  role:
    enabled: true
    rules:
    - apiGroups:
      - jenkins.io
      resources:
      - commitstatuses
      verbs:
      - get
      - create
      - update
      - patch
      - watch
      - list
    - apiGroups:
      - jenkins.io
      resources:
      - environments
      - plugins
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - jenkins.io
      resources:
      - pipelineactivities
      verbs:
      - get
      - patch
      - update
    - apiGroups:
      - ""
      resources:
      - namespaces
      - pods
      - secrets
      - configmaps
      verbs:
      - watch
      - list
      - get

controllerrole:
  enabled: true
  serviceaccount:
    enabled: true
  deployment:
    enabled: true
  probe:
    path: ""
  restartPolicy: Always
  args:
  - "controller"
  - "role"
  image:
    repository: gcr.io/jenkinsxio/builder-jx
    tag: 2.1.88-717
  clusterrole:
    enabled: true
    rules:
    - apiGroups:
      - ""
      - extensions
      - apps
      - rbac.authorization.k8s.io
      - batch
      - jenkins.io
      resources:
      - "*"
      - "pods/*"
      verbs:
      - list
      - get
      - watch
      - create
      - update
      - patch
      - delete
    - apiGroups:
      - apiextensions.k8s.io
      resources:
      - customresourcedefinitions
      verbs:
      - get
      - create
      - patch
      - update
      - list
  role:
    enabled: true
    rules:
    - apiGroups:
      - "*"
      resources:
      - "*"
      verbs:
      - "*"

controllerteam:
  enabled: false
  serviceaccount:
    enabled: true
  deployment:
    enabled: true
  env:
    GIT_AUTHOR_NAME: "jenkins-x-bot"
    GIT_AUTHOR_EMAIL: "jenkins-x@googlegroups.com"
    XDG_CONFIG_HOME: "/home/jenkins"
  probe:
    path: ""
  restartPolicy: Always
  args:
  - "controller"
  - "team"
  image:
    repository: gcr.io/jenkinsxio/builder-jx
    tag: 2.1.88-717
  clusterrole:
    enabled: true
    rules:
    - apiGroups:
      - ""
      resources:
      - namespaces
      verbs:
      - get
      - watch
      - list
      - create
      - patch
      - update
    - apiGroups:
      - apiextensions.k8s.io
      resources:
      - customresourcedefinitions
      verbs:
      - get
      - create
      - patch
      - update
      - list
    - apiGroups:
      - jenkins.io
      resources:
      - teams
      - users
      verbs:
      - list
      - get
      - watch
      - patch
      - update
    - apiGroups:
      - jenkins.io
      resources:
      - users
      verbs:
      - list
      - get
      - watch
  role:
    enabled: true
    rules:
    - apiGroups:
      - jenkins.io
      resources:
      - teams
      - users
      verbs:
      - list
      - get
      - watch
    - apiGroups:
      - jenkins.io
      resources:
      - environments
      verbs:
      - list
      - get
      - watch
      - create
      - patch
      - update
    - apiGroups:
      - ""
      resources:
      - namespaces
      - configmaps
      - persistentvolumeclaims
      - secrets
      - serviceaccounts
      - services
      verbs:
      - list
      - watch
      - get
      - create
      - patch
      - update
      - delete
    - apiGroups:
      - "apps/v1"
      resources:
      - deployments
      verbs:
      - list
      - watch
      - get
      - create
      - patch
      - update
      - delete
    - apiGroups:
      - "rbac.authorization.k8s.io/v1"
      resources:
      - roles
      - rolebindings
      verbs:
      - list
      - watch
      - get


expose:
  enabled: true
  Annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded
    # use value of `path` to use path based ingress
    #config:
    #pathMode: "path"

cleanup:
  enabled: true
  Args:
  - --cleanup
  Annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-delete-policy: hook-succeeded

docker-registry:
  enabled: true
  service:
    annotations:
      fabric8.io/expose: "true"
      fabric8.io/ingress.annotations: "kubernetes.io/ingress.class: nginx\nnginx.ingress.kubernetes.io/proxy-body-size: 2g"
  persistence:
    accessMode: 'ReadWriteOnce'
    enabled: true
    size: 100Gi

kubernetes-dashboard:
  serviceAnnotations:
    fabric8.io/expose: "true"
    fabric8.io/ingress.annotations: "kubernetes.io/ingress.class: nginx\nnginx.ingress.kubernetes.io/auth-type: basic\nnginx.ingress.kubernetes.io/auth-secret: jx-basic-auth"

nexus:
  enabled: true
  service:
    annotations:
      fabric8.io/expose: "true"
      fabric8.io/ingress.annotations: "kubernetes.io/ingress.class: nginx"

heapster:
  enabled: true

nexusServiceLink:
  enabled: false

  # specify the external name here for where the nexus should point
  externalName: ""

chartmuseum:
  enabled: true
  service:
    annotations:
      fabric8.io/expose: "true"
      fabric8.io/ingress.annotations: "kubernetes.io/ingress.class: nginx"
  persistence:
    enabled: true
    AccessMode: ReadWriteOnce
    Size: 8Gi
  env:
    open:
      AUTH_ANONYMOUS_GET: true
      DISABLE_API: false
    secret:
      BASIC_AUTH_USER: admin
      BASIC_AUTH_PASS: admin
  image:
    tag: v0.7.1
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 160m
      memory: 128Mi

chartmuseumServiceLink:
  enabled: false

  # specify the external name here for where the chartmuseum should be
  externalName: ""

PipelineSecrets:
  DockerConfig: "{}"
  GithubToken:
  NPMToken:
  GPG:
    pubring: ""
    secjenkins: ""
    secring: ""
    trustdb: ""
  SSHConfig: |-
    Host github.com
        User git
        IdentityFile /root/.ssh-git/ssh-key
        StrictHostKeyChecking no
  MavenSettingsSecurityXML:
  MavenSettingsXML: |-
    <settings>
        <!-- sets the local maven repository outside of the ~/.m2 folder for easier mounting of secrets and repo -->
        <localRepository>${user.home}/.mvnrepository</localRepository>
        <!-- lets disable the download progress indicator that fills up logs -->
        <interactiveMode>false</interactiveMode>
        <mirrors>
            <mirror>
            <id>nexus</id>
            <mirrorOf>external:*</mirrorOf>
            <url>http://nexus:8081/repository/maven-group/</url>
            </mirror>
        </mirrors>
        <servers>
            <server>
            <id>nexus</id>
            <username>admin</username>
            <password>admin123</password>
        </server>
        <server>
            <id>oss-sonatype-staging</id>
            <username></username>
            <password></password>
            </server>
        </servers>
        <profiles>
            <profile>
                <id>nexus</id>
                <properties>
                    <altDeploymentRepository>nexus::default::http://nexus/repository/maven-snapshots/</altDeploymentRepository>
                    <altReleaseDeploymentRepository>nexus::default::http://nexus/repository/maven-releases/</altReleaseDeploymentRepository>
                    <altSnapshotDeploymentRepository>nexus::default::http://nexus/repository/maven-snapshots/</altSnapshotDeploymentRepository>
                </properties>
            </profile>
            <profile>
                <id>release</id>
                <properties>
                    <gpg.executable>gpg</gpg.executable>
                    <gpg.passphrase>mysecretpassphrase</gpg.passphrase>
                </properties>
            </profile>
        </profiles>
        <activeProfiles>
            <!--make the profile active all the time -->
            <activeProfile>nexus</activeProfile>
        </activeProfiles>
    </settings>

grafana:
  server:
    adminUser: "admin"
    adminPassword: "admin"

    ## Pass the plugins you want installed as a comma seperated list.
    ## This will pass each plugin name to `grafana-cli plugins install ${plugin}`.
    ## Ref: https://github.com/grafana/grafana-docker#installing-plugins-for-grafana-3
    ##
    # installPlugins:

    # Set datasource in beginning
    setDatasource:
      ## If true, an initial Grafana Datasource will be set
      enabled: true

      # How long should it take to commit failure
      # Default: 300
      #
      activeDeadlineSeconds: 1000

      # Curl Docker image
      # Default: appropriate/curl:latest
      #
      image: appropriate/curl:latest
      restartPolicy: OnFailure

      # This assembles how curl post into Grafana
      # Ref1: http://docs.grafana.org/reference/http_api/#create-data-source
      # Ref2: https://github.com/grafana/grafana/issues/1789
      #
      datasource:
        # The datasource name.
        # Default: default
        name: prometheus

        # Type of datasource
        # Default: prometheus
        #
        type: prometheus

        # The url of the datasource. To set correctly you need to know
        # the right datasource name and its port ahead. Check kubernetes
        # dashboard or describe the service should fulfill the requirements.
        # Synatx like `http://<release name>-<server name>:<port number>
        # Default: "http://limping-tiger-server"
        #
        url: "http://jenkins-x-prometheus-server:80"

        # The name of the database at the datasource.
        # Required parameter when used with elasticsearch, which refers to the index_name
        # Default: <empty>
        # database:

        # Additional JSON data to be passed to the configuration of the datasource.
        # The JSON data is passed to curl, therefore it needs proper quoting and
        # escaping and needs to be on a single line. For example:
        #  '\"esVersion\": 2, \"interval\": \"Daily\", \"timeField\": \"@timestamp\"'
        # jsonData: null

        # Specify if Grafana has to go thru proxy to reach datasource
        # Default: proxy
        #
        access: proxy

        # Specify should Grafana use this datasource as default
        # Default: true
        #
        isDefault: true

    service:
      annotations:
        fabric8.io/expose: "true"
        fabric8.io/ingress.annotations: "kubernetes.io/ingress.class: nginx"
